var n=Object.defineProperty;var h=(c,e,t)=>e in c?n(c,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):c[e]=t;var o=(c,e,t)=>(h(c,typeof e!="symbol"?e+"":e,t),t);const l=function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const a of i)if(a.type==="childList")for(const d of a.addedNodes)d.tagName==="LINK"&&d.rel==="modulepreload"&&s(d)}).observe(document,{childList:!0,subtree:!0});function t(i){const a={};return i.integrity&&(a.integrity=i.integrity),i.referrerpolicy&&(a.referrerPolicy=i.referrerpolicy),i.crossorigin==="use-credentials"?a.credentials="include":i.crossorigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function s(i){if(i.ep)return;i.ep=!0;const a=t(i);fetch(i.href,a)}};l();const r=document.querySelector.bind(document);document.querySelectorAll.bind(document);class u{constructor(){o(this,"handleDataAvailable",e=>{this.chunks.push(e.data)});o(this,"handleStop",()=>{const e=new Blob(this.chunks,{type:"video/mp4"});this.downloadButton.href=URL.createObjectURL(e),this.downloadButton.download="video.mp4",this.downloadButton.disabled=!1,this.recordedVideo.src=URL.createObjectURL(e),this.recordedVideo.load(),this.recordedVideo.onloadedmetadata=()=>{this.recordedVideoWrap.classList.remove("hidden"),this.recordedVideoWrap.scrollIntoView({behavior:"smooth",block:"start"}),this.recordedVideo.play()},this.reset(),console.log("Finish record !")});o(this,"setRecorder",()=>{this.recorder=new MediaRecorder(this.mixedStream),this.recorder.ondataavailable=this.handleDataAvailable,this.recorder.onstop=this.handleStop,this.recorder.start(200)});o(this,"setWebcam",async()=>{if(this.webcam&&this.removeAllTracks(["webcam"]),this.mediaType.webcam){this.changeMediaType("webcam");return}try{const{webcam:e}=this.constraints;this.changeMediaType("webcam",1),this.webcam=await navigator.mediaDevices.getUserMedia(e),this.webcamVideo.srcObject=this.webcam,this.webcamVideo.onloadedmetadata=()=>{this.webcamVideo.requestPictureInPicture().then(t=>{t.addEventListener("resize",()=>onPipWindowResize(),!1)}),this.webcamVideo.play()}}catch(e){console.log("Cannot use webcam !"),console.log("More info: ",e),this.changeMediaType("webcam")}finally{this.changeMediaType("webcam")}});o(this,"setAudio",async()=>{if(this.audio&&this.removeAllTracks(["audio"]),this.mediaType.audio){this.changeMediaType("audio");return}try{const{audio:e}=this.constraints;this.changeMediaType("audio",1),this.audio=await navigator.mediaDevices.getUserMedia(e)}catch(e){console.log("Cannot use micro !"),console.log("More info: ",e),this.changeMediaType("audio")}finally{this.changeMediaType("audio")}});o(this,"setSpeaker",async()=>{if(this.speaker&&this.removeAllTracks(["speaker"]),this.mediaType.speaker){this.changeMediaType("speaker");return}try{const t=(await navigator.mediaDevices.enumerateDevices()).filter(s=>s.kind==="audiooutput"&&s.deviceId==="default");this.speaker=await navigator.mediaDevices.getUserMedia({audio:{deviceId:t}})}catch(e){console.log("Cannot use speaker !"),console.log("More info: ",e),this.changeMediaType("speaker")}finally{this.changeMediaType("speaker")}});o(this,"setStream",async()=>{try{const{stream:e}=this.constraints;this.stream=await navigator.mediaDevices.getDisplayMedia(e),this.changeStatus(1),this.setVideoStream()}catch(e){console.log("Please choose the source to start recording !"),console.log("More info: ",e)}});o(this,"chooseMedia",async()=>{this.stream&&this.removeAllTracks(["stream"]);try{await this.setStream(),this.streamVideo.scrollIntoView({behavior:"smooth",block:"start"})}catch(e){console.log("Please select one source !"),console.log("More info: ",e)}});o(this,"startRecording",()=>{const{audio:e,stream:t,webcam:s,speaker:i}=this;if(!t){console.warn("No stream available !");return}this.changeStatus(1),this.changeStatus("stop"),this.recordedVideoWrap.classList.add("hidden");const a=[...t.getTracks()];e&&a.push(...e.getTracks()),s&&a.push(...s.getTracks()),i&&a.push(...i.getTracks()),this.mixedStream=new MediaStream(a),this.setRecorder(),console.log("Recording...")});o(this,"stopRecording",()=>{this.changeStatus(0),this.changeStatus("start"),this.recorder.stop(),console.log("Stop recording !")});o(this,"reset",()=>{this.chunks.length=0,this.removeAllTracks(["audio","stream","webcam","speaker"])});this.constraints={audio:{audio:{echoCancellation:!0,noiseSuppression:!0,sampleRate:44100}},stream:{video:!0},webcam:{video:!0}},this.chunks=[],this.audio=null,this.stream=null,this.webcam=null,this.speaker=null,this.mixedStream=null,this.recorder=null,this.type=0,this.mediaType={audio:!1,webcam:!1,speaker:!1},this.stopButton=r(".stop-btn"),this.startButton=r(".start-btn"),this.downloadButton=r(".download-video-btn"),this.chooseMediaButton=r(".choose-media-btn"),this.hasAudioEle=r(".has-audio"),this.hasWebcamEle=r(".has-webcam"),this.streamVideo=r(".stream-video"),this.webcamVideo=r(".webcam-video"),this.recordedVideo=r(".recorded-video"),this.recordedVideoWrap=r(".recorded-video-wrap")}removeAllTracks(e){e.forEach(t=>{var s;return(s=this[t])==null?void 0:s.getTracks().forEach(i=>i.stop())})}changeStatus(e){const t=typeof e=="number",s=["start","stop"];t&&(this.stopButton.classList.toggle("hidden",!e),this.startButton.classList.toggle("hidden",!e),this.chooseMediaButton.innerText=e?"Other source":"Choose source"),s.includes(e)&&(this.stopButton.disabled=e==="start",this.startButton.disabled=e==="stop"),!e||e==="stop"?(this.hasAudioEle.classList.add("hidden"),this.chooseMediaButton.classList.add("hidden"),this.startButton.innerText="Recording ..."):(this.hasAudioEle.classList.remove("hidden"),this.chooseMediaButton.classList.remove("hidden"),this.startButton.innerText="Start")}changeMediaType(e,t=0){const s=e[0].toUpperCase()+e.slice(1);if(t){this[`has${s}Ele`].classList.remove("get-media"),this[`has${s}Ele`].classList.remove("notget-media"),this[`has${s}Ele`].classList.add("loading-media");return}this.mediaType[e]=!this.mediaType[e],this[`has${s}Ele`].classList.toggle("get-media",this.mediaType[e]),this[`has${s}Ele`].classList.toggle("notget-media",!this.mediaType[e]),this[`has${s}Ele`].classList.remove("loading-media")}setVideoStream(){if(!this.stream){console.warn("No stream available !");return}this.streamVideo.srcObject=this.stream,this.streamVideo.play()}launch(){this.hasAudioEle.onclick=this.setAudio,this.hasWebcamEle.onclick=this.setWebcam,this.stopButton.onclick=this.stopRecording,this.startButton.onclick=this.startRecording,this.chooseMediaButton.onclick=this.chooseMedia}}addEventListener("load",()=>{new u().launch()});
